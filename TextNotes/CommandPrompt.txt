Command Prompt/Command Line {
	IF YOUR DIRECTORY HAS A SPACE IN IT, "THE DIRECTORY/NEEDS/TO/BE/IN_QUOTES.ok"
	cd [directory]								navigate to directory
		cd C:\Users	
		cd .. 									navigate to parent directory
	dir 										shows contents of current directory
		dir -ah									shows all + hidden contents of the directory
	mkdir [name]								creates a directory named [name] 
	more [filename]								display contents of file
	type [typename]								display contents of file.
		type nul > [filename]					creates an empty file named [filename]
	del /f [directory\filename]					force deletes file at [directory\filename]
		del /s [filename]						deletes all files named "filename" from this directory and all (/s) subdirectories. (recursively delete-ish)
	cls											clears the screen.
	q											returns to directory operational mode if in other mode (e.g., scrolling mode)
	^											the escape character. HEAD^ needs to be HEAD^^
	echo <STRING>								types STRING back at user.
		echo <STRING> > file.file_extension		finds or creates file.file_extension and overwrites it with contents STRING
			echo "Hello" > temp.txt
	PAGINATION
		/SEARCHTERM								finds first instance of SEARCHTERM in current pagination session
			"n"									finds next instance
			"N"									finds previous instance
		"q"										exits pagination mode
		" ","f"									continues by one page
		UP/DOWN									navigates UP/DOWN one line.
	GET PASSWORDS FOR PREVIUOUSLY USED WIFI
		netsh wlan show profiles 									shows the list of previously connected wifi profiles
			netsh wlan show profiles name=PROFILENAME key=clear		shows the information on the profile PROFILENAME. Key Content contains the password.
	start . 									Opens the current directory in a file explorer.
		explorer								Opens a new file explorer. 
}

PowerShell: {
	dir -Recurse *.txt | Get-Content | Measure-Object -Line			Display the count all lines of code in a directory.
}

Linux Commands{
	rmdir [directory]							remove directory
	rm [matcher]								removes item(s) that match the matcher, 
		e.g.: rm .yarn* -r 						removes all items and directories in the current and sub-directories that begin with '.yarn'
	touch 										create new file.
		touch first.txt							creates first.txt
	echo 										display text
		echo 'First.txt'						will display 'First.txt'
		echo [text] >> [filename]				writes text to the file filename.
			echo 'First!' >> first.txt			writes 
	FILE VIEWING
		cat 										concatenates the contents of a file to another and displays it to the screen.
			cat first.txt
		nl 											reveals contents of file with line numbers prepended to lines.
			nl first.txt 
		less 										reveals contents of file one page at a time.
			less first.txt 
		head 										reveals the first 10 lines (by default) of a file.
			head first.txt 
			head -n <file> 							reveals the first n lines of a file.
				head -1 first.txt 
		tail 										reveals the last 10 lines (by default) of a file.
			tail first.txt 
			tail -n <file> 							reveals the last n lines of a file.
				tail -1 first.txt 
		strings 									returns each string of printable characters in files.
			strings first.txt 
	sudo 										overrules user permissions by invoking Super User DO.
	find . -name "PATTERN" -delete                                                             deletes all files with a name that matches the regex PATTERN in the current directory
		find . -name "[a-z]*[0-9]{2}" -delete                                                    deletes all files with any number of lowercase letters followed by two numbers in their name.
	find . -wholename "PATTERN" -delete                                                        deletes all files with a name that matches the regex PATTERN in the current directory
		find . -wholename "*.jpg" -delete                                                        deletes all .jpg files in the directory.
	find . -mindepth 1 -maxdepth 1 -type d -exec [command] {} [options] \;                     runs command in every directory immediately below the current directory.
		find . -mindepth 1 -maxdepth 1 -type d -exec git -C {} pull \;                           pulls every git repository in a directory.
		find . -mindepth 1 -maxdepth 1 -type d '!' -exec test -e "{}/[filename]" ';' -print      Prints every subdirectory that does not have a file named filename.
			find . -mindepth 1 -maxdepth 1 -type d '!' -exec test -e "{}/.gitignore" ';' -print    check for .gitignore files, for instance
	RUN MULTIPLE COMMANDS
		A ; B										Run A and then B, regardless of the success or failure of A
		A && B									Run B only if A succeeded
		A || B									Run B only if A failed
}
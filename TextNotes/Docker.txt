Docker{
	Dockerfile
		-
	docker.compose
		-
	CLI
		docker build -t <tag-name/image name>
		docker start 
		docker stop 
		docker run 

		
	Stephen@GAMER MINGW64 ~/Google Drive/Personal/Technical/Keys
	$ ssh -i "TimTheMighty.pem" ec2-user@ec2-18-218-28-115.us-east-2.compute.amazonaws.com
	load pubkey "TimTheMighty.pem": invalid format

		__|  __|_  )
		_|  (     /   Amazon Linux 2 AMI
		___|\___|___|

	https://aws.amazon.com/amazon-linux-2/
	sudo: apt-get: command not found
	$ sudo yum update -y
	$ sudo docker run -d -p 8080:8080 -p 50000:50000 --memory=512m --name jenkinscontainer jenkins/jenkins:lts
	docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
	See 'docker run --help'.
	$ docker -v
	Docker version 19.03.6-ce, build 369ce74
	$ sudo service docker start
	$ sudo docker run -d -p 8080:8080 -p 50000:50000 --memory=512m --name jenkinscontainer jenkins/jenkins:lts

	Usage:  docker [OPTIONS] COMMAND
		A self-sufficient runtime for containers
		Options:
			--config string      Location of client config files (default
								"/home/ec2-user/.docker")
		-c, --context string     Name of the context to use to connect to the
								daemon (overrides DOCKER_HOST env var and
								default context set with "docker context use")
		-D, --debug              Enable debug mode
		-H, --host list          Daemon socket(s) to connect to
		-l, --log-level string   Set the logging level
								("debug"|"info"|"warn"|"error"|"fatal")
								(default "info")
			--tls                Use TLS; implied by --tlsverify
			--tlscacert string   Trust certs signed only by this CA (default
								"/home/ec2-user/.docker/ca.pem")
			--tlscert string     Path to TLS certificate file (default
								"/home/ec2-user/.docker/cert.pem")
			--tlskey string      Path to TLS key file (default
								"/home/ec2-user/.docker/key.pem")
			--tlsverify          Use TLS and verify the remote
		-v, --version            Print version information and quit
		
		Management Commands:
		builder     Manage builds
		config      Manage Docker configs
		container   Manage containers
		context     Manage contexts
		engine      Manage the docker engine
		image       Manage images
		network     Manage networks
		node        Manage Swarm nodes
		plugin      Manage plugins
		secret      Manage Docker secrets
		service     Manage services
		stack       Manage Docker stacks
		swarm       Manage Swarm
		system      Manage Docker
		trust       Manage trust on Docker images
		volume      Manage volumes

		Commands:
		attach      Attach local standard input, output, and error streams to a running container
		build       Build an image from a Dockerfile
		commit      Create a new image from a container's changes
		cp          Copy files/folders between a container and the local filesystem
		create      Create a new container
		deploy      Deploy a new stack or update an existing stack
		diff        Inspect changes to files or directories on a container's filesystem
		events      Get real time events from the server
		exec        Run a command in a running container
		export      Export a container's filesystem as a tar archive
		history     Show the history of an image
		images      List images
		import      Import the contents from a tarball to create a filesystem image
		info        Display system-wide information
		inspect     Return low-level information on Docker objects
		kill        Kill one or more running containers
		load        Load an image from a tar archive or STDIN
		login       Log in to a Docker registry
		logout      Log out from a Docker registry
		logs        Fetch the logs of a container
		pause       Pause all processes within one or more containers
		port        List port mappings or a specific mapping for the container
		ps          List containers
		pull        Pull an image or a repository from a registry
		push        Push an image or a repository to a registry
		rename      Rename a container
		restart     Restart one or more containers
		rm          Remove one or more containers
		rmi         Remove one or more images
		run         Run a command in a new container
		save        Save one or more images to a tar archive (streamed to STDOUT by default)
		search      Search the Docker Hub for images
		start       Start one or more stopped containers
		stats       Display a live stream of container(s) resource usage statistics
		stop        Stop one or more running containers
		tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
		top         Display the running processes of a container
		unpause     Unpause all processes within one or more containers
		update      Update configuration of one or more containers
		version     Show the Docker version information
		wait        Block until one or more containers stop, then print their exit codes

		Run 'docker COMMAND --help' for more information on a command.

	$ sudo docker logs jenkinscontainer
	$ sudo docker ps
	CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                              NAMES
	17c582da4927        jenkins/jenkins:lts   "/sbin/tini -- /usr/â€¦"   2 hours ago         Up 2 hours          0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkinscontainer
	$ sudo docker stop ^C
	$ sudo docker stop 17c582da4927
	$ sudo docker ps
	$ sudo docker start 17c582da4927
	$ sudo docker stop 17c582da4927
	$ sudo docker start 17c582da4927
}
C++{
	You can default templates.
		template<typename A = int, typename B = double>
		class Bar
		{
			//...
		};
		...
		int main()
		{
			Bar<> bar; // use all default type arguments
		}
	To view the value inside a pointer in the visual studio debug window, type in the name of the pointer and the number of space you want to see, i.e.
		(*deckOfInts).array, 52
	Memory
		C++ does not have garbage collection.
		If you set a pointer to NULL, this does not cause the memory to return to the pool of available memory. 
		If no other pointers point to this block of memory, you now simply have an "orphaned" block of memory that remains allocated but is now unreachable -- a leak. 
			Leaks only cause a program to crash if they build up to a point where no memory is left to allocate.
		There's also the converse situation, where you delete a block of memory using a pointer, and later try to access that memory as though it was still allocated.
		This is possible because calling delete on a pointer does not set the pointer to NULL -- it still points to the address of memory that previously was allocated. 
		A pointer to memory that is no longer allocated is called a dangling pointer and accessing it will usually cause strange program behaviour and crashes, 
			since its contents are probably not what you expect -- that piece of memory may have since been reallocated for some other purpose.
		Another difference between delete and free() is that only the former calls the object's destructor. 
			(Remember that you must call delete on an object allocated with new, and free() for memory allocated with malloc() -- they can't be mixed.) 
		IMPORTANT: In C++, it's always best to use static allocation if possible, but if not, then prefer new to malloc().
		IMPORTANT: STACK vs HEAP
			STACK memory is organized and used to store main function calls that get cleared up as functions complete their task.
				Main
				Game Loop
				Mannequin::Tick()
				FVector::DotProduct()
			HEAP memory is unorganized and used to store dynamic things used between function calls. Dynamic Memory Allocation.
	Pointers and References
		var		The variable.
		*var	returns the value pointed at by var.
				may be declaring a Type T pointer to a variable named var if preceded by Type T:
					int *var;
		**var	returns the value pointed at the value pointed at by var.
		var*	denotes a pointer to an array of type 'var'
		var**	denotes a pointer array of pointer arrays of type 'var'.
		&var	returns the address of var.
		// &&var	
		var&	denotes a pointer to a variable of type 'var'
				void myFunc(const int& someInt)
		// var&&	
	String Notation (http://www.cplusplus.com/reference/cstdio/printf/)
		%[flags][width][.precision][length]specifier
			Specifier
				d or i	Signed decimal integer														392
				u		Unsigned decimal integer													7235
				o		Unsigned octal																610
				x		Unsigned hexadecimal integer												7fa
				X		Unsigned hexadecimal integer (uppercase)									7FA
				f		Decimal floating point, lowercase											392.65
				F		Decimal floating point, uppercase											392.65
				e		Scientific notation (mantissa/exponent), lowercase							3.9265e+2
				E		Scientific notation (mantissa/exponent), uppercase							3.9265E+2
				g		Use the shortest representation: %e or %f									392.65
				G		Use the shortest representation: %E or %F									392.65
				a		Hexadecimal floating point, lowercase										-0xc.90fep-2
				A		Hexadecimal floating point, uppercase										-0XC.90FEP-2
				c		Character																	a
				s		String of characters														sample
				p		Pointer address																b8000000
				n		Nothing printed.
						The corresponding argument must be a pointer to a signed int.
						The number of characters written so far is stored in the pointed location.	
				%		A % followed by another % character will write a single % to the stream.	%
			Flag
				-		Left-justify within the given field width; Right justification is the default (see width sub-specifier).
				+		Forces to preceed the result with a plus or minus sign (+ or -) even for positive numbers. By default, only negative numbers are preceded with a - sign.
				(space)	If no sign is going to be written, a blank space is inserted before the value.
				#		Used with o, x or X specifiers the value is preceeded with 0, 0x or 0X respectively for values different than zero.
						Used with a, A, e, E, f, F, g or G it forces the written output to contain a decimal point even if no more digits follow. By default, if no digits follow, no decimal point is written.
				0		Left-pads the number with zeroes (0) instead of spaces when padding is specified (see width sub-specifier).
			Width
				(number)	Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.
				*			The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.
			.Precision
				.number	For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.
						For a, A, e, E, f and F specifiers: this is the number of digits to be printed after the decimal point (by default, this is 6).
						For g and G specifiers: This is the maximum number of significant digits to be printed.
						For s: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered.
						If the period is specified without an explicit value for precision, 0 is assumed.
				.*		The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.
			Length
				length	d i				u o x X					f F e E g G a A	c		s		p		n
				(none)	int				unsigned int			double			int		char*	void*	int*
				hh		signed char		unsigned char													signed char*
				h		short int		unsigned short int												short int*
				l		long int		unsigned long int						wint_t	wchar_t*		long int*
				ll		long long int	unsigned long long int											long long int*
				j		intmax_t		uintmax_t														intmax_t*
				z		size_t			size_t															size_t*
				t		ptrdiff_t		ptrdiff_t														ptrdiff_t*
				L												long double				
			Example
				Code
					/* printf example */
					#include <stdio.h>
					int main()
					{
						printf ("Characters: %c %c \n", 'a', 65);
						printf ("Decimals: %d %ld\n", 1977, 650000L);
						printf ("Preceding with blanks: %10d \n", 1977);
						printf ("Preceding with zeros: %010d \n", 1977);
						printf ("Some different radices: %d %x %o %#x %#o \n", 100, 100, 100, 100, 100);
						printf ("floats: %4.2f %+.0e %E \n", 3.1416, 3.1416, 3.1416);
						printf ("Width trick: %*d \n", 5, 10);
						printf ("%s \n", "A string");
						return 0;
					}
				Output
					Characters: a A
					Decimals: 1977 650000
					Preceding with blanks:       1977
					Preceding with zeros: 0000001977
					Some different radices: 100 64 144 0x64 0144
					floats: 3.14 +3e+000 3.141600E+000
					Width trick:    10
					A string
}